<soapenv:Header/>
<soapenv:Body>
<sips:consultarPrecios>
<sips:ciudad>', ciudad, '</sips:ciudad>
<sips:producto>', producto, '</sips:producto>
<sips:fechaInicio>', fecha_inicio, '</sips:fechaInicio>
<sips:fechaFin>', fecha_fin, '</sips:fechaFin>
</sips:consultarPrecios>
</soapenv:Body>
</soapenv:Envelope>
')
# Headers necesarios
headers <- c(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = ""  # Algunos servicios requieren una acción SOAP específica
)
# Enviar la petición POST
response <- POST(
url,
body = soap_body,
add_headers(.headers = headers),
verbose()  # Opcional: muestra detalles de la petición (útil para depurar)
)
# Procesar la respuesta
if (status_code(response) == 200) {
content_xml <- content(response, "text") |> read_xml()
# Extraer datos (ajusta según la estructura XML de respuesta)
precios <- xml_find_all(content_xml, ".//return") |>
map_df(~{
list(
producto = xml_text(xml_find_first(.x, ".//producto")),
precio = xml_text(xml_find_first(.x, ".//precio")),
fecha = xml_text(xml_find_first(.x, ".//fecha"))
})
library(httr)
library(xml2)
library(dplyr)   # Para manipulación de datos
library(purrr)
consultar_precios_sipsan <- function(ciudad, producto, fecha_inicio, fecha_fin) {
# URL del servicio SOAP del DANE
url <- "http://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Cuerpo de la petición SOAP (ajusta según documentación oficial)
soap_body <- paste0('
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sips="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<sips:consultarPrecios>
<sips:ciudad>', ciudad, '</sips:ciudad>
<sips:producto>', producto, '</sips:producto>
<sips:fechaInicio>', fecha_inicio, '</sips:fechaInicio>
<sips:fechaFin>', fecha_fin, '</sips:fechaFin>
</sips:consultarPrecios>
</soapenv:Body>
</soapenv:Envelope>
')
# Headers necesarios
headers <- c(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = ""  # Algunos servicios requieren una acción SOAP específica
)
# Enviar la petición POST
response <- POST(
url,
body = soap_body,
add_headers(.headers = headers),
verbose()  # Opcional: muestra detalles de la petición (útil para depurar)
)
# Procesar la respuesta
if (status_code(response) == 200) {
content_xml <- content(response, "text") |> read_xml()
# Extraer datos (ajusta según la estructura XML de respuesta)
precios <- xml_find_all(content_xml, ".//return") |>
map_df(~{
list(
producto = xml_text(xml_find_first(.x, ".//producto")),
precio = xml_text(xml_find_first(.x, ".//precio")),
fecha = xml_text(xml_find_first(.x, ".//fecha"))
})
library(httr)
library(xml2)
library(dplyr)   # Para manipulación de datos
library(purrr)
consultar_precios_sipsan <- function(ciudad, producto, fecha_inicio, fecha_fin) {
# URL del servicio SOAP del DANE
url <- "http://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Cuerpo de la petición SOAP (ajusta según documentación oficial)
soap_body <- paste0('
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sips="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<sips:consultarPrecios>
<sips:ciudad>', ciudad, '</sips:ciudad>
<sips:producto>', producto, '</sips:producto>
<sips:fechaInicio>', fecha_inicio, '</sips:fechaInicio>
<sips:fechaFin>', fecha_fin, '</sips:fechaFin>
</sips:consultarPrecios>
</soapenv:Body>
</soapenv:Envelope>
')
# Headers necesarios
headers <- c(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = ""  # Algunos servicios requieren una acción SOAP específica
)
# Enviar la petición POST
response <- POST(
url,
body = soap_body,
add_headers(.headers = headers),
verbose()  # Opcional: muestra detalles de la petición (útil para depurar)
)
# Procesar la respuesta
if (status_code(response) == 200) {
content_xml <- content(response, "text") |> read_xml()
# Extraer datos (ajusta según la estructura XML de respuesta)
precios <- xml_find_all(content_xml, ".//return") |>
map_df(~{
list(
producto = xml_text(xml_find_first(.x, ".//producto")),
precio = xml_text(xml_find_first(.x, ".//precio")),
fecha = xml_text(xml_find_first(.x, ".//fecha"))
})
library(httr)
library(xml2)
library(dplyr)
library(purrr)
consultar_precios_sipsan <- function(ciudad, producto, fecha_inicio, fecha_fin) {
# URL del servicio SOAP del DANE
url <- "http://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Cuerpo de la petición SOAP (ajusta según documentación oficial)
soap_body <- paste0('
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sips="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<sips:consultarPrecios>
<sips:ciudad>', ciudad, '</sips:ciudad>
<sips:producto>', producto, '</sips:producto>
<sips:fechaInicio>', fecha_inicio, '</sips:fechaInicio>
<sips:fechaFin>', fecha_fin, '</sips:fechaFin>
</sips:consultarPrecios>
</soapenv:Body>
</soapenv:Envelope>
')
# Headers necesarios
headers <- c(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = ""  # Algunos servicios requieren una acción SOAP específica
)
# Enviar la petición POST
response <- POST(
url,
body = soap_body,
add_headers(.headers = headers),
verbose()  # Opcional: muestra detalles de la petición (útil para depurar)
)
# Procesar la respuesta
if (status_code(response) == 200) {
content_xml <- content(response, "text") |> read_xml()
# Extraer datos (ajusta según la estructura XML de respuesta)
precios <- xml_find_all(content_xml, ".//return") |>
map_df(~{
list(
producto = xml_text(xml_find_first(.x, ".//producto")),
precio = xml_text(xml_find_first(.x, ".//precio")),
fecha = xml_text(xml_find_first(.x, ".//fecha"))
})
consultar_precios_sipsan <- function(ciudad, producto, fecha_inicio, fecha_fin) {
# URL del servicio SOAP del DANE
url <- "http://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Cuerpo de la petición SOAP (ajusta según documentación oficial)
soap_body <- paste0('
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sips="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<sips:consultarPrecios>
<sips:ciudad>', ciudad, '</sips:ciudad>
<sips:producto>', producto, '</sips:producto>
<sips:fechaInicio>', fecha_inicio, '</sips:fechaInicio>
<sips:fechaFin>', fecha_fin, '</sips:fechaFin>
</sips:consultarPrecios>
</soapenv:Body>
</soapenv:Envelope>
')
# Headers necesarios
headers <- c(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = ""  # Algunos servicios requieren una acción SOAP específica
)
# Enviar la petición POST
response <- POST(
url,
body = soap_body,
add_headers(.headers = headers),
verbose()  # Opcional: muestra detalles de la petición (útil para depurar)
)
# Procesar la respuesta
if (status_code(response) == 200) {
content_xml <- content(response, "text") |> read_xml()
# Extraer datos (ajusta según la estructura XML de respuesta)
precios <- xml_find_all(content_xml, ".//return") |>
map_df(~{
list(
producto = xml_text(xml_find_first(.x, ".//producto")),
precio = xml_text(xml_find_first(.x, ".//precio")),
fecha = xml_text(xml_find_first(.x, ".//fecha"))
})
install.packages("rJava")
library(rJava)
install.packages("httr")
install.packages("XML")
install.packages("XML")
library(httr)
library(XML)
# Crear el cuerpo SOAP
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:tu="http://tunamespace.com/">
<soapenv:Header/>
<soapenv:Body>
<tu:tuMetodo>
<tu:param1>valor1</tu:param1>
<tu:param2>valor2</tu:param2>
</tu:tuMetodo>
</soapenv:Body>
</soapenv:Envelope>'
# Realizar la petición
response <- POST(
"http://tu-servidor-weblogic:puerto/tu-servicio",
body = soap_body,
content_type("text/xml"),
add_headers(SOAPAction = "http://tunamespace.com/tuMetodo")
)
# Cargar librerías
library(httr)
library(xml2)
# URL del servicio (endpoint real, sin ?WSDL)
url <- "https://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Crear el cuerpo SOAP
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<urn:promediosSipsaSemanaMadr>
<arg0/>
</urn:promediosSipsaSemanaMadr>
</soapenv:Body>
</soapenv:Envelope>'
# Realizar la petición POST
response <- POST(
url = url,
body = soap_body,
content_type("text/xml; charset=utf-8"),
encode = "raw"
)
# Verificar si hay error en la respuesta
if (http_error(response)) {
stop("Error en la petición: ", status_code(response))
}
library(httr)
library(xml2)
# URL del endpoint SOAP (sin ?WSDL)
url <- "https://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Crear el cuerpo SOAP
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<urn:promediosSipsaSemanaMadr>
<arg0/>
</urn:promediosSipsaSemanaMadr>
</soapenv:Body>
</soapenv:Envelope>'
# Hacer la petición SOAP con headers ajustados
response <- POST(
url = url,
body = soap_body,
encode = "raw",
add_headers(
"Content-Type" = "text/xml; charset=utf-8",
"SOAPAction" = "" # muchos servicios SOAP esperan este header
)
)
# Revisar errores HTTP
if (http_error(response)) {
stop("Error en la petición: ", status_code(response))
}
library(httr)
library(xml2)
# URL del endpoint SOAP (sin ?WSDL)
url <- "https://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Crear el cuerpo SOAP
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<urn:promediosSipsaSemanaMadr>
<arg0/>
</urn:promediosSipsaSemanaMadr>
</soapenv:Body>
</soapenv:Envelope>'
# Hacer la petición SOAP con headers ajustados
response <- POST(
url = url,
body = soap_body,
encode = "raw",
add_headers(
"Content-Type" = "text/xml; charset=utf-8",
"SOAPAction" = "" # muchos servicios SOAP esperan este header
)
)
# Revisar errores HTTP
if (http_error(response)) {
stop("Error en la petición: ", status_code(response))
}
library(httr)
library(xml2)
# URL del endpoint SOAP (sin ?WSDL)
url <- "https://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService"
# Crear el cuerpo SOAP
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<urn:promediosSipsaSemanaMadr>
<arg0/>
</urn:promediosSipsaSemanaMadr>
</soapenv:Body>
</soapenv:Envelope>'
# Hacer la petición SOAP con headers ajustados
response <- POST(
url = url,
body = soap_body,
encode = "raw",
add_headers(
"Content-Type" = "text/xml; charset=utf-8",
"SOAPAction" = "" # muchos servicios SOAP esperan este header
)
)
# Revisar errores HTTP
if (http_error(response)) {
stop("Error en la petición: ", status_code(response))
}
soap_body <- '
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="http://sipsa.dane.gov.co/">
<soapenv:Header/>
<soapenv:Body>
<urn:promediosSipsaSemanaMadr>
<arg0/>
</urn:promediosSipsaSemanaMadr>
</soapenv:Body>
</soapenv:Envelope>'
# Hacer la petición SOAP con headers ajustados
response <- POST(
url = url,
body = soap_body,
encode = "raw",
add_headers(
"Content-Type" = "text/xml; charset=utf-8",
"SOAPAction" = "" # muchos servicios SOAP esperan este header
)
)
response
library(reticulate)
library(reticulate)
# Ejecutar código Python directamente desde R
py_run_string("
from zeep import Client
wsdl = 'https://appweb.dane.gov.co/sipsaWS/SrvSipsaUpraBeanService?WSDL'
client = Client(wsdl)
result = client.service.promediosSipsaSemanaMadr()
print(result)
")
install.packages("googlesheets4")
library(googlesheets4)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
library(googlesheets4)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
url <- "https://docs.google.com/spreadsheets/d/1JwGQCUjLN1SRBPIAzWgl5XVyvXPiykuayWWCptcjvP8/edit?resourcekey=&gid=148528435#gid=148528435"
data <- read_sheet(url)
library(googlesheets4)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
data
library(googlesheets4)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
datos
url <- "https://docs.google.com/spreadsheets/d/1JwGQCUjLN1SRBPIAzWgl5XVyvXPiykuayWWCptcjvP8/edit?resourcekey=&gid=148528435#gid=148528435"
datos <- read_sheet(url)
datos
print(datos)
datos$Dirección
datos$`Código vivienda`
S=datos%>%summarise(`Código vivienda`)%>%summarise(total=n())
library(dplyr)
url <- "https://docs.google.com/spreadsheets/d/1JwGQCUjLN1SRBPIAzWgl5XVyvXPiykuayWWCptcjvP8/edit?resourcekey=&gid=148528435#gid=148528435"
datos <- read_sheet(url)
S=datos%>%summarise(`Código vivienda`)%>%summarise(total=n())
S=datos%>%group_by(`Código vivienda`)%>%summarise(total=n())
S
Encuesta_inicial <- read_sheet(url)
S=Encuesta_inicial%>%group_by(`Código vivienda`)%>%summarise(total=n())
S
S[S$total>1,]
Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,]
S=Encuesta_inicial%>%group_by(`Código vivienda`)%>%summarise(total=n())
S=S[S$total>1,]
Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,]
View(Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,])
library(googlesheets4)
library(dplyr)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
# Lee la hoja de cálculo
url <- "https://docs.google.com/spreadsheets/d/1JwGQCUjLN1SRBPIAzWgl5XVyvXPiykuayWWCptcjvP8/edit?resourcekey=&gid=148528435#gid=148528435"
Encuesta_inicial <- read_sheet(url)
S=Encuesta_inicial%>%group_by(`Código vivienda`)%>%summarise(total=n())
S
S=S[S$total>1,]
Encuestas_repetidas=Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,]
names(Encuestas_Con_ID_repetidas)
library(googlesheets4)
library(dplyr)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
Encuesta_inicial <- read_sheet(url)
S=Encuesta_inicial%>%group_by(`Código vivienda`)%>%summarise(total=n())
S=S[S$total>1,]
Encuestas_Con_ID_repetidas=Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,]
Encuestas_Con_ID_repetidas
names(Encuestas_Con_ID_repetidas)
Encuestas_Con_ID_repetidas
Encuestas_Con_ID_repetidas
Encuestas_Con_ID_repetidas$`Tipo de identificación`
names(Encuestas_Con_ID_repetidas)
c("Marca temporal",
"Nombre encuestador",
"Código vivienda",
"Dirección",
"Nombres y Apellidos del encuestado")
# Autoriza (te pedirá iniciar sesión la primera vez)
library(googlesheets4)
library(dplyr)
# Autoriza (te pedirá iniciar sesión la primera vez)
gs4_auth()
# Lee la hoja de cálculo
url <- "https://docs.google.com/spreadsheets/d/1JwGQCUjLN1SRBPIAzWgl5XVyvXPiykuayWWCptcjvP8/edit?resourcekey=&gid=148528435#gid=148528435"
Encuesta_inicial <- read_sheet(url)
S=Encuesta_inicial%>%group_by(`Código vivienda`)%>%summarise(total=n())
S=S[S$total>1,]
Encuestas_Con_ID_repetidas=Encuesta_inicial[Encuesta_inicial$`Código vivienda`%in%S$`Código vivienda`,]
Encuestas_Con_ID_repetidas=Encuestas_Con_ID_repetidas[,c("Marca temporal",
"Nombre encuestador",
"Código vivienda",
"Dirección",
"Nombres y Apellidos del encuestado")]
Encuesta_inicial
Encuestas_Con_ID_repetidas[order(Encuestas_Con_ID_repetidas$`Código vivienda`),]
install.packages("DBI")
install.packages("odbc")
library(odbc)
odbc::odbcListDrivers()
library(odbc)
odbc::odbcListDrivers()
library(DBI)
library(odbc)
# Conexión
con <- dbConnect(odbc::odbc(),
Driver   = "Oracle in instantclient_21_18",  # Pon el nombre exacto del driver
Dbq      = "10.0.68.88:1521/OVC_iad13t.catastro.vcnbcgs.oraclevcn.com",
UID      = "consulta_fotografias",
PWD      = "BDV4Lormas2024*",
encoding = "UTF-8")
library(odbc)
odbc::odbcListDrivers()
#install.packages("DBI")
#install.packages("odbc")
library(DBI)
library(odbc)
# Conexión
con <- dbConnect(odbc::odbc(),
Driver   = "Oracle in instantclient_21_18",  # Pon el nombre exacto del driver
Dbq      = "10.0.68.88:1521/OVC_iad13t.catastro.vcnbcgs.oraclevcn.com",
UID      = "consulta_fotografias",
PWD      = "BDV4Lormas2024*",
encoding = "UTF-8")
library(DBI)
library(RJDBC)
install.packages("RJDBC")
library(DBI)
library(RJDBC)
# Ruta al driver JDBC
drv <- JDBC(driverClass = "oracle.jdbc.OracleDriver",
classPath = "C:/oracle/ojdbc8.jar")
library(odbc)
odbc::odbcListDrivers()
install.packages("par")
install.packages("arrow")
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/estatutostributarios/Clean/Outputs/2015")
library(arrow)
df <- read_parquet("05002.parquet")
